import React, { useState, useEffect, useRef } from 'react';
import { useAuth } from '../../hooks/useAuth';
import io from 'socket.io-client';
import './ConversationsList.css';

const ConversationsList = ({ onSelectConversation, refreshTrigger }) => {
  const { user } = useAuth();
  const [conversations, setConversations] = useState([]);
  const [loading, setLoading] = useState(true);
  const socketRef = useRef(null);
  const [deletingConversation, setDeletingConversation] = useState(null);

  const fetchConversations = async () => {
    if (!user?.id) return;
    
    try {
      setLoading(true);
      const response = await fetch(`http://localhost:5000/api/users/${user.id}/conversations`);
      if (response.ok) {
        const data = await response.json();
        setConversations(data);
        console.log(`üìã Loaded ${data.length} conversations`);
        console.log('üìã Conversations data:', data);
      }
    } catch (error) {
      console.error('Error fetching conversations:', error);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchConversations();
    
    // Refresh conversations every 10 seconds (faster)
    const interval = setInterval(fetchConversations, 10000);
    return () => clearInterval(interval);
  }, [user?.id]);

  // Refresh when refreshTrigger changes (when conversation is marked as read)
  useEffect(() => {
    if (refreshTrigger) {
      fetchConversations();
    }
  }, [refreshTrigger]);

  const handleDeleteConversation = async (bookingId, e) => {
    e.stopPropagation(); // Prevent conversation selection
    
    if (!confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a to√†n b·ªô cu·ªôc tr√≤ chuy·ªán n√†y?')) {
      return;
    }
    
    setDeletingConversation(bookingId);
    
    try {
      const response = await fetch(`http://localhost:5000/api/conversations/${bookingId}`, {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ userId: user.id })
      });

      if (response.ok) {
        const result = await response.json();
        console.log('‚úÖ Conversation deleted successfully:', result.message);
        // WebSocket s·∫Ω t·ª± ƒë·ªông c·∫≠p nh·∫≠t UI
      } else {
        const error = await response.json();
        console.error('‚ùå Failed to delete conversation:', error);
        console.error('Response status:', response.status);
        alert(error.error || `L·ªói ${response.status}: Kh√¥ng th·ªÉ x√≥a cu·ªôc tr√≤ chuy·ªán`);
      }
    } catch (error) {
      console.error('Error deleting conversation:', error);
      alert('L·ªói khi x√≥a cu·ªôc tr√≤ chuy·ªán');
    } finally {
      setDeletingConversation(null);
    }
  };

  // Setup WebSocket for real-time conversation updates
  useEffect(() => {
    if (!user?.id) return;

    socketRef.current = io('http://localhost:5000', {
      withCredentials: true,
      transports: ['websocket', 'polling']
    });
    
    // Join user to their room
    socketRef.current.emit('join', { 
      userId: user.id, 
      role: user.role 
    });

    socketRef.current.on('connect', () => {
      console.log('‚úÖ ConversationsList WebSocket connected');
    });

    socketRef.current.on('connect_error', (error) => {
      console.error('‚ùå ConversationsList WebSocket error:', error);
    });
    
    socketRef.current.on('new_message', (data) => {
      console.log('üîî New message received in conversations:', data);
      // Refresh conversations when new message arrives ƒë·ªÉ c·∫≠p nh·∫≠t unread count
      setTimeout(fetchConversations, 500); // Small delay to ensure DB is updated
    });

    // Listen for conversation deletion
    socketRef.current.on('conversation_deleted', (data) => {
      console.log('üóëÔ∏è Conversation deleted:', data);
      // Remove conversation from list
      setConversations(prev => prev.filter(conv => conv.bookingId !== data.bookingId));
    });

    return () => {
      if (socketRef.current) {
        socketRef.current.disconnect();
      }
    };
  }, [user?.id, user?.role]);

  const formatLastMessageTime = (dateString) => {
    if (!dateString) return '';
    
    const date = new Date(dateString);
    const now = new Date();
    const diffInMinutes = Math.floor((now - date) / (1000 * 60));
    
    if (diffInMinutes < 1) return 'V·ª´a xong';
    if (diffInMinutes < 60) return `${diffInMinutes} ph√∫t tr∆∞·ªõc`;
    
    const diffInHours = Math.floor(diffInMinutes / 60);
    if (diffInHours < 24) return `${diffInHours} gi·ªù tr∆∞·ªõc`;
    
    const diffInDays = Math.floor(diffInHours / 24);
    if (diffInDays < 7) return `${diffInDays} ng√†y tr∆∞·ªõc`;
    
    return date.toLocaleDateString('vi-VN');
  };

  const truncateMessage = (message, maxLength = 50) => {
    if (!message) return 'Ch∆∞a c√≥ tin nh·∫Øn';
    return message.length > maxLength ? message.substring(0, maxLength) + '...' : message;
  };

  const getBookingStatusBadge = (status) => {
    const statusMap = {
      'pending': { text: 'Ch·ªù x√°c nh·∫≠n', class: 'status-pending' },
      'confirmed': { text: 'ƒê√£ x√°c nh·∫≠n', class: 'status-confirmed' },
      'in_progress': { text: 'ƒêang th·ª±c hi·ªán', class: 'status-in-progress' },
      'completed': { text: 'Ho√†n th√†nh', class: 'status-completed' },
      'cancelled': { text: 'ƒê√£ h·ªßy', class: 'status-cancelled' }
    };
    
    const statusInfo = statusMap[status] || { text: status, class: 'status-default' };
    return (
      <span className={`booking-status ${statusInfo.class}`}>
        {statusInfo.text}
      </span>
    );
  };

  if (loading) {
    return (
      <div className="conversations-loading">
        <div className="loading-spinner"></div>
        <p>ƒêang t·∫£i cu·ªôc tr√≤ chuy·ªán...</p>
      </div>
    );
  }

  if (conversations.length === 0) {
    return (
      <div className="conversations-empty">
        <div className="empty-icon">üí¨</div>
        <h3>Ch∆∞a c√≥ cu·ªôc tr√≤ chuy·ªán</h3>
        <p>C√°c cu·ªôc tr√≤ chuy·ªán s·∫Ω xu·∫•t hi·ªán khi b·∫°n c√≥ booking v·ªõi kh√°ch h√†ng ho·∫∑c ng∆∞·ªùi gi√∫p vi·ªác.</p>
      </div>
    );
  }

  return (
    <div className="conversations-list">
      <div className="conversations-header">
        <h2>Tin nh·∫Øn</h2>
        <span className="conversations-count">({conversations.length})</span>
      </div>
      
      <div className="conversations-items">
        {conversations.map((conversation) => (
          <div
            key={conversation.bookingId}
            className="conversation-item"
            onClick={() => onSelectConversation(conversation)}
          >
            <div className="conversation-avatar">
              {conversation.otherUserName?.charAt(0) || '?'}
            </div>
            
            <div className="conversation-content">
              <div className="conversation-header">
                <h4 className="conversation-name">
                  {conversation.otherUserName}
                </h4>
                <div className="conversation-actions">
                  <span className="conversation-time">
                    {formatLastMessageTime(conversation.lastMessageTime)}
                  </span>
                  <button
                    className="delete-conversation-btn"
                    onClick={(e) => handleDeleteConversation(conversation.bookingId, e)}
                    disabled={deletingConversation === conversation.bookingId}
                    title="X√≥a cu·ªôc tr√≤ chuy·ªán"
                  >
                    {deletingConversation === conversation.bookingId ? '‚è≥' : 'üóëÔ∏è'}
                  </button>
                </div>
              </div>
              
              <div className="conversation-details">
                <p className="conversation-service">
                  üìã {conversation.service}
                </p>
                {getBookingStatusBadge(conversation.bookingStatus)}
              </div>
              
              <div className="conversation-last-message">
                <p>{truncateMessage(conversation.lastMessage)}</p>
                {conversation.unreadCount > 0 && (
                  <span className="unread-badge">
                    {conversation.unreadCount}
                  </span>
                )}
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default ConversationsList;
