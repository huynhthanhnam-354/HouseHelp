import React, { useState, useEffect } from 'react';
import { useAuth } from '../hooks/useAuth';
import './BookingCompletion.css';

const BookingCompletion = ({ booking, onStatusUpdate }) => {
  const { user } = useAuth();
  const [loading, setLoading] = useState(false);
  const [showPaymentModal, setShowPaymentModal] = useState(false);
  const [paymentMethod, setPaymentMethod] = useState('cash');
  const [rating, setRating] = useState(5);
  const [review, setReview] = useState('');
  const [completionNotes, setCompletionNotes] = useState('');
  const [paymentInfo, setPaymentInfo] = useState(null);
  const [forceUpdate, setForceUpdate] = useState(0);

  // Fetch payment info for this booking
  useEffect(() => {
    const fetchPaymentInfo = async () => {
      if (!booking?.id) return;
      
      try {
        const response = await fetch(`http://localhost:5000/api/bookings/${booking.id}/payment`);
        
        if (response.ok) {
          const payment = await response.json();
          setPaymentInfo(payment);
          setForceUpdate(prev => prev + 1);
        } else if (response.status === 404) {
          setPaymentInfo(null);
        }
      } catch (error) {
        console.error('Error fetching payment info:', error);
        setPaymentInfo(null);
      }
    };

    fetchPaymentInfo();
  }, [booking?.id]);

  // Debug paymentInfo changes
  useEffect(() => {
    if (paymentInfo && paymentInfo.status === 'success') {
      console.log('‚úÖ Payment success - showing completed status');
    }
  }, [paymentInfo]);

  const handleCompleteWork = async () => {
    if (!user || user.role !== 'housekeeper') return;
    
    setLoading(true);
    try {
      const response = await fetch(`http://localhost:5000/api/bookings/${booking.id}/complete`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          housekeeperId: booking.housekeeperId,
          completionNotes: completionNotes
        }),
      });

      const result = await response.json();
      
      if (response.ok) {
        alert('‚úÖ ƒê√£ ƒë√°nh d·∫•u c√¥ng vi·ªác ho√†n th√†nh! Kh√°ch h√†ng s·∫Ω nh·∫≠n ƒë∆∞·ª£c th√¥ng b√°o ƒë·ªÉ x√°c nh·∫≠n thanh to√°n.');
        onStatusUpdate && onStatusUpdate('completed');
      } else {
        alert('‚ùå L·ªói: ' + result.error);
      }
    } catch (error) {
      console.error('Error completing booking:', error);
      alert('‚ùå C√≥ l·ªói x·∫£y ra khi ho√†n th√†nh c√¥ng vi·ªác');
    } finally {
      setLoading(false);
    }
  };

  const handleConfirmPayment = async () => {
    if (!user || user.role !== 'customer') return;
    
    setLoading(true);
    try {
      const response = await fetch(`http://localhost:5000/api/bookings/${booking.id}/confirm-payment`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          customerId: user.id,
          paymentMethod: paymentMethod,
          rating: rating,
          review: review
        }),
      });

      const result = await response.json();
      
      if (response.ok) {
        alert('‚úÖ ƒê√£ x√°c nh·∫≠n thanh to√°n th√†nh c√¥ng! C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng d·ªãch v·ª•.');
        setShowPaymentModal(false);
        
        // Refresh payment info
        const paymentResponse = await fetch(`http://localhost:5000/api/bookings/${booking.id}/payment`);
        if (paymentResponse.ok) {
          const payment = await paymentResponse.json();
          setPaymentInfo(payment);
        }
        
        onStatusUpdate && onStatusUpdate('paid');
      } else {
        alert('‚ùå L·ªói: ' + result.error);
      }
    } catch (error) {
      console.error('Error confirming payment:', error);
      alert('‚ùå C√≥ l·ªói x·∫£y ra khi x√°c nh·∫≠n thanh to√°n');
    } finally {
      setLoading(false);
    }
  };

  const formatCurrency = (amount) => {
    return new Intl.NumberFormat('vi-VN', {
      style: 'currency',
      currency: 'VND'
    }).format(amount);
  };

  const renderStars = (currentRating, onRatingChange) => {
    return (
      <div className="star-rating">
        {[1, 2, 3, 4, 5].map((star) => (
          <span
            key={star}
            className={`star ${star <= currentRating ? 'active' : ''}`}
            onClick={() => onRatingChange(star)}
          >
            ‚≠ê
          </span>
        ))}
      </div>
    );
  };

  // Housekeeper view - n√∫t ho√†n th√†nh c√¥ng vi·ªác
  if (user?.role === 'housekeeper' && booking.status === 'confirmed') {
    return (
      <div className="booking-completion housekeeper">
        <div className="completion-card">
          <h3>üèÅ Ho√†n th√†nh c√¥ng vi·ªác</h3>
          <p>B·∫°n ƒë√£ ho√†n th√†nh c√¥ng vi·ªác <strong>{booking.service}</strong>?</p>
          
          <div className="form-group">
            <label>Ghi ch√∫ ho√†n th√†nh (t√πy ch·ªçn):</label>
            <textarea
              value={completionNotes}
              onChange={(e) => setCompletionNotes(e.target.value)}
              placeholder="M√¥ t·∫£ ng·∫Øn v·ªÅ c√¥ng vi·ªác ƒë√£ ho√†n th√†nh..."
              rows="3"
            />
          </div>

          <button 
            className="complete-btn"
            onClick={handleCompleteWork}
            disabled={loading}
          >
            {loading ? '‚è≥ ƒêang x·ª≠ l√Ω...' : '‚úÖ ƒê√°nh d·∫•u ho√†n th√†nh'}
          </button>
        </div>
      </div>
    );
  }

  // Hi·ªÉn th·ªã tr·∫°ng th√°i ƒë√£ thanh to√°n (d·ª±a v√†o b·∫£ng payments)
  if (paymentInfo && paymentInfo.status === 'success') {
    return (
      <div className="booking-completion completed">
        <div className="completion-card success">
          <h3>‚úÖ ƒê√£ ho√†n th√†nh</h3>
          <p>C√¥ng vi·ªác ƒë√£ ho√†n th√†nh v√† thanh to√°n th√†nh c√¥ng!</p>
          <div className="completion-info">
            <span>üí∞ ƒê√£ thanh to√°n: {formatCurrency(paymentInfo.amount)}</span>
            <span>üìÖ Thanh to√°n l√∫c: {new Date(paymentInfo.paidAt).toLocaleString('vi-VN')}</span>
          </div>
        </div>
      </div>
    );
  }

  // Customer view - n√∫t x√°c nh·∫≠n thanh to√°n
  if (user?.role === 'customer' && booking.status === 'completed') {
    return (
      <div className="booking-completion customer">
        <div className="completion-card">
          <h3>üí∞ X√°c nh·∫≠n thanh to√°n</h3>
          <p><strong>{booking.housekeeperName}</strong> ƒë√£ ho√†n th√†nh c√¥ng vi·ªác <strong>{booking.service}</strong></p>
          <div className="payment-amount">
            <span>S·ªë ti·ªÅn: </span>
            <strong>{formatCurrency(booking.totalPrice)}</strong>
          </div>

          <button 
            className="payment-btn"
            onClick={() => setShowPaymentModal(true)}
          >
            üí≥ X√°c nh·∫≠n & Thanh to√°n
          </button>
        </div>

        {/* Payment Modal */}
        {showPaymentModal && (
          <div className="modal-overlay">
            <div className="payment-modal">
              <div className="modal-header">
                <h3>üí≥ X√°c nh·∫≠n thanh to√°n</h3>
                <button 
                  className="close-btn"
                  onClick={() => setShowPaymentModal(false)}
                >
                  ‚úï
                </button>
              </div>

              <div className="modal-content">
                <div className="payment-summary">
                  <p><strong>D·ªãch v·ª•:</strong> {booking.service}</p>
                  <p><strong>Ng∆∞·ªùi gi√∫p vi·ªác:</strong> {booking.housekeeperName}</p>
                  <p><strong>Th·ªùi gian:</strong> {booking.duration} gi·ªù</p>
                  <p><strong>T·ªïng ti·ªÅn:</strong> <span className="amount">{formatCurrency(booking.totalPrice)}</span></p>
                </div>

                <div className="form-group">
                  <label>Ph∆∞∆°ng th·ª©c thanh to√°n:</label>
                  <select 
                    value={paymentMethod} 
                    onChange={(e) => setPaymentMethod(e.target.value)}
                  >
                    <option value="cash">üíµ Ti·ªÅn m·∫∑t</option>
                    <option value="bank_transfer">üè¶ Chuy·ªÉn kho·∫£n</option>
                    <option value="e_wallet">üì± V√≠ ƒëi·ªán t·ª≠</option>
                    <option value="credit_card">üí≥ Th·∫ª t√≠n d·ª•ng</option>
                  </select>
                </div>

                <div className="form-group">
                  <label>ƒê√°nh gi√° d·ªãch v·ª•:</label>
                  {renderStars(rating, setRating)}
                </div>

                <div className="form-group">
                  <label>Nh·∫≠n x√©t (t√πy ch·ªçn):</label>
                  <textarea
                    value={review}
                    onChange={(e) => setReview(e.target.value)}
                    placeholder="Chia s·∫ª tr·∫£i nghi·ªám c·ªßa b·∫°n v·ªÅ d·ªãch v·ª•..."
                    rows="3"
                  />
                </div>

                <div className="modal-actions">
                  <button 
                    className="cancel-btn"
                    onClick={() => setShowPaymentModal(false)}
                  >
                    H·ªßy
                  </button>
                  <button 
                    className="confirm-btn"
                    onClick={handleConfirmPayment}
                    disabled={loading}
                  >
                    {loading ? '‚è≥ ƒêang x·ª≠ l√Ω...' : '‚úÖ X√°c nh·∫≠n thanh to√°n'}
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    );
  }

  // Hi·ªÉn th·ªã tr·∫°ng th√°i ƒë√£ thanh to√°n (d·ª±a v√†o b·∫£ng payments)
  // N·∫øu c√≥ payment success, coi nh∆∞ completed (b·∫•t k·ªÉ booking.status)
  const shouldShowCompleted = paymentInfo && paymentInfo.status === 'success';
  
  console.log('üîç Render decision:', {
    bookingStatus: booking.status,
    hasPaymentInfo: !!paymentInfo,
    paymentStatus: paymentInfo?.status,
    shouldShowCompleted
  });

  if (shouldShowCompleted) {
    console.log('‚úÖ Showing COMPLETED status - booking completed + payment success');
    return (
      <div className="booking-completion completed" style={{border: '2px solid green', padding: '10px', margin: '10px'}}>
        <div className="completion-card success">
          <h3>‚úÖ ƒê√£ ho√†n th√†nh</h3>
          <p>C√¥ng vi·ªác ƒë√£ ho√†n th√†nh v√† thanh to√°n th√†nh c√¥ng!</p>
          <div className="completion-info">
            <span>üí∞ ƒê√£ thanh to√°n: {formatCurrency(paymentInfo.amount)}</span>
            <span>üìÖ Thanh to√°n l√∫c: {new Date(paymentInfo.paidAt).toLocaleString('vi-VN')}</span>
          </div>
        </div>
      </div>
    );
  }

  console.log('üîç BookingCompletion render check:');
  console.log('  - booking.status:', booking.status);
  console.log('  - paymentInfo:', paymentInfo);
  console.log('  - paymentInfo?.status:', paymentInfo?.status);
  console.log('  - user:', user);
  console.log('  - user?.role:', user?.role);

  return null;
};

export default BookingCompletion;
