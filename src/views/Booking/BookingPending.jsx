import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { useLanguage } from '../../contexts/LanguageContext';
import { useNotifications } from '../../contexts/NotificationContext';
import { useBooking } from '../../contexts/BookingContext';
import { useAuth } from '../../hooks/useAuth';
import translations from '../../locales/translations';
import './BookingPending.css';

export default function BookingPending({ booking, housekeeper, onCancel }) {
  const { language } = useLanguage();
  const { notifications } = useNotifications();
  const { clearBookingState, resetBooking } = useBooking();
  const { user } = useAuth();
  const navigate = useNavigate();
  const t = translations[language];
  
  const [timeElapsed, setTimeElapsed] = useState(0);
  const [isConfirmed, setIsConfirmed] = useState(false);
  
  // Check for notifications immediately on render
  const hasRejectNotification = notifications.some(notif => 
    notif.type === 'booking_rejected' && 
    (parseInt(notif.bookingId) === parseInt(booking?.id))
  );
  
  const hasConfirmNotification = notifications.some(notif => 
    notif.type === 'booking_confirmed' && 
    (parseInt(notif.bookingId) === parseInt(booking?.id))
  );

  // Timer ƒë·ªÉ ƒë·∫øm th·ªùi gian ch·ªù
  useEffect(() => {
    const timer = setInterval(() => {
      setTimeElapsed(prev => prev + 1);
    }, 1000);

    return () => clearInterval(timer);
  }, []);

  // L·∫Øng nghe notification x√°c nh·∫≠n/t·ª´ ch·ªëi t·ª´ housekeeper
  const [bookingResult, setBookingResult] = useState(null); // 'confirmed' | 'rejected' | null

  useEffect(() => {
      console.log('BookingPending checking notifications...', {
    notificationsCount: notifications.length,
    bookingId: booking?.id,
    currentResult: bookingResult
  });
  
  console.log('=== CUSTOMER DEBUG ===');
  console.log('Current user ID:', user?.id);
  console.log('All notifications:', notifications);
  console.log('Looking for booking ID:', booking?.id);
  
  // Debug each notification
  notifications.forEach((notif, index) => {
    console.log(`Notification ${index}:`, {
      id: notif.id,
      type: notif.type,
      bookingId: notif.bookingId,
      title: notif.title,
      message: notif.message,
      timestamp: notif.timestamp
    });
  });

    const confirmNotification = notifications.find(
      notif => notif.type === 'booking_confirmed' && 
               parseInt(notif.bookingId) === parseInt(booking?.id)
    );

    const rejectNotification = notifications.find(
      notif => notif.type === 'booking_rejected' && 
               parseInt(notif.bookingId) === parseInt(booking?.id)
    );

    console.log('Found notifications:', {
      confirmNotification: !!confirmNotification,
      rejectNotification: !!rejectNotification,
      confirmDetails: confirmNotification,
      rejectDetails: rejectNotification,
      currentBookingId: booking?.id,
      currentBookingIdType: typeof booking?.id
    });
    


    // Debug booking ID matching
    notifications.forEach((notif, index) => {
      if (notif.type === 'booking_confirmed' || notif.type === 'booking_rejected') {
        console.log(`ID Match Check ${index}:`, {
          notifBookingId: notif.bookingId,
          notifBookingIdType: typeof notif.bookingId,
          currentBookingId: booking?.id,
          currentBookingIdType: typeof booking?.id,
          exactMatch: notif.bookingId === booking?.id,
          intMatch: parseInt(notif.bookingId) === parseInt(booking?.id)
        });
      }
    });

    if (confirmNotification && !bookingResult) {
      console.log('üéâ Booking confirmed! Setting result to confirmed');
      
      // NGAY L·∫¨P T·ª®C set state confirmed
      setBookingResult('confirmed');
      setIsConfirmed(true);
      
      // Show immediate toast notification like Grab
      if (window.showToast) {
        window.showToast('üéâ ƒê·∫∑t l·ªãch ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n!', 'booking_confirmed', 3000);
      }
      
      // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng v√† chuy·ªÉn v·ªÅ trang ch·ªß sau 5 gi√¢y
      setTimeout(() => {
        // Clear all booking states
        localStorage.removeItem('bookingState');
        // Reset booking context
        if (resetBooking) {
          resetBooking();
        }
        // Force reload ƒë·ªÉ reset ho√†n to√†n
        window.location.href = '/';
      }, 5000);
    } else if (rejectNotification) {
      console.log('üòî Booking rejected! Setting result to rejected');
      console.log('üîç Current bookingResult:', bookingResult);
      console.log('üîç Reject notification details:', rejectNotification);
      console.log('üîç Current booking ID:', booking?.id);
      console.log('üîç Force setting to rejected...');
      
      // NGAY L·∫¨P T·ª®C set state rejected
      setBookingResult('rejected');
      
      // Show immediate toast notification like Grab
      if (window.showToast) {
        window.showToast('üòî ƒê·∫∑t l·ªãch ƒë√£ b·ªã t·ª´ ch·ªëi', 'booking_rejected', 3000);
      }
      
      // Chuy·ªÉn v·ªÅ trang ch·ªß sau 3 gi√¢y
      setTimeout(() => {
        console.log('üè† Navigating back to home...');
        // Clear all booking states
        localStorage.removeItem('bookingState');
        // Reset booking context
        if (resetBooking) {
          resetBooking();
        }
        // Force reload ƒë·ªÉ reset ho√†n to√†n
        window.location.href = '/';
      }, 3000);
    }
  }, [notifications, booking?.id, bookingResult, navigate]);

  const formatTime = (seconds) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
  };

  const handleCancel = () => {
    console.log('Canceling booking and clearing state...');
    clearBookingState(); // Clear localStorage and reset state
    if (onCancel) {
      onCancel();
    }
    navigate('/'); // V·ªÅ trang ch·ªß
  };

  // Removed debug function

  if (bookingResult === 'confirmed' || hasConfirmNotification) {
    return (
      <div className="booking-pending-container">
        <div className="booking-confirmed-success">
          <div className="success-icon">‚úÖ</div>
          <h2>{t.bookingConfirmed || 'ƒê·∫∑t l·ªãch ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n!'}</h2>
          <p>{t.bookingConfirmedMessage || `${housekeeper?.fullName} ƒë√£ x√°c nh·∫≠n ƒë∆°n ƒë·∫∑t l·ªãch c·ªßa b·∫°n.`}</p>
          <div className="booking-details">
            <p><strong>{t.service}:</strong> {booking?.service}</p>
            <p><strong>{t.date}:</strong> {booking?.date}</p>
            <p><strong>{t.time}:</strong> {booking?.time}</p>
            <p><strong>{t.location}:</strong> {booking?.location}</p>
            <p><strong>{t.bookingId || 'M√£ ƒë·∫∑t l·ªãch'}:</strong> {booking?.id}</p>
          </div>
          <p className="redirect-message">{t.redirectingHome || 'ƒêang chuy·ªÉn v·ªÅ trang ch·ªß trong 5 gi√¢y...'}</p>
        </div>
      </div>
    );
  }

  if (bookingResult === 'rejected' || hasRejectNotification) {
    return (
      <div className="booking-pending-container">
        <div className="booking-rejected-message">
          <div className="reject-icon">‚ùå</div>
          <h2>{t.bookingRejected || 'ƒê·∫∑t l·ªãch b·ªã t·ª´ ch·ªëi'}</h2>
          <p>{t.bookingRejectedMessage || `R·∫•t ti·∫øc, ${housekeeper?.fullName} ƒë√£ t·ª´ ch·ªëi ƒë∆°n ƒë·∫∑t l·ªãch c·ªßa b·∫°n.`}</p>
          <div className="booking-details">
            <p><strong>{t.service}:</strong> {booking?.service}</p>
            <p><strong>{t.date}:</strong> {booking?.date}</p>
            <p><strong>{t.time}:</strong> {booking?.time}</p>
            <p><strong>{t.location}:</strong> {booking?.location}</p>
            <p><strong>{t.bookingId || 'M√£ ƒë·∫∑t l·ªãch'}:</strong> {booking?.id}</p>
          </div>
          <div className="rejection-suggestions">
            <h4>{t.suggestionsTitle || 'G·ª£i √Ω cho b·∫°n:'}</h4>
            <ul>
              <li>{t.suggestion1 || 'Th·ª≠ ƒë·∫∑t l·ªãch v·ªõi ng∆∞·ªùi gi√∫p vi·ªác kh√°c'}</li>
              <li>{t.suggestion2 || 'Ch·ªçn th·ªùi gian kh√°c ph√π h·ª£p h∆°n'}</li>
              <li>{t.suggestion3 || 'Li√™n h·ªá tr·ª±c ti·∫øp v·ªõi ng∆∞·ªùi gi√∫p vi·ªác ƒë·ªÉ th·ªèa thu·∫≠n'}</li>
            </ul>
          </div>
          <div className="rejection-actions">
            <button 
              className="find-other-btn"
              onClick={() => navigate('/')}
            >
              {t.findOtherHousekeeper || 'T√¨m ng∆∞·ªùi gi√∫p vi·ªác kh√°c'}
            </button>
          </div>
          <p className="redirect-message">{t.redirectingHomeReject || 'T·ª± ƒë·ªông chuy·ªÉn v·ªÅ trang ch·ªß trong 5 gi√¢y...'}</p>
        </div>
      </div>
    );
  }

  return (
    <div className="booking-pending-container">
      <div className="booking-pending-card">
        <div className="pending-header">
          <div className="pending-icon">
            <div className="spinner"></div>
          </div>
          <h2>{t.waitingConfirmation || 'Ch·ªù x√°c nh·∫≠n t·ª´ ng∆∞·ªùi gi√∫p vi·ªác'}</h2>
          <p className="pending-subtitle">
            {t.waitingConfirmationMessage || 'Ch√∫ng t√¥i ƒë√£ g·ª≠i y√™u c·∫ßu ƒë·∫øn ng∆∞·ªùi gi√∫p vi·ªác. Vui l√≤ng ch·ªù trong gi√¢y l√°t.'}
          </p>
        </div>

        <div className="booking-summary">
          <h3>{t.bookingSummary || 'Th√¥ng tin ƒë·∫∑t l·ªãch'}</h3>
          
          <div className="housekeeper-info">
            <div className="housekeeper-avatar">
              {housekeeper?.avatar || housekeeper?.fullName?.charAt(0) || 'H'}
            </div>
            <div className="housekeeper-details">
              <h4>{housekeeper?.fullName}</h4>
              <div className="rating">
                <span className="stars">{'‚òÖ'.repeat(Math.floor(housekeeper?.rating || 0))}</span>
                <span>{housekeeper?.rating || 'N/A'}</span>
              </div>
            </div>
          </div>

          <div className="booking-details">
            <div className="detail-row">
              <span className="label">{t.service}:</span>
              <span className="value">{booking?.service}</span>
            </div>
            <div className="detail-row">
              <span className="label">{t.date}:</span>
              <span className="value">{booking?.date}</span>
            </div>
            <div className="detail-row">
              <span className="label">{t.time}:</span>
              <span className="value">{booking?.time}</span>
            </div>
            <div className="detail-row">
              <span className="label">{t.duration}:</span>
              <span className="value">{booking?.duration} {t.hours}</span>
            </div>
            <div className="detail-row">
              <span className="label">{t.location}:</span>
              <span className="value">{booking?.location}</span>
            </div>
            <div className="detail-row total">
              <span className="label">{t.totalPrice}:</span>
              <span className="value">${booking?.totalPrice}</span>
            </div>
          </div>

          {booking?.notes && (
            <div className="booking-notes">
              <h4>{t.specialRequests || 'Y√™u c·∫ßu ƒë·∫∑c bi·ªát'}:</h4>
              <p>{booking.notes}</p>
            </div>
          )}
        </div>

        <div className="waiting-info">
          <div className="waiting-time">
            <span className="time-label">{t.waitingTime || 'Th·ªùi gian ch·ªù'}:</span>
            <span className="time-value">{formatTime(timeElapsed)}</span>
          </div>
          
          <div className="waiting-tips">
            <h4>{t.whileWaiting || 'Trong khi ch·ªù ƒë·ª£i'}:</h4>
            <ul>
              <li>{t.waitingTip1 || 'Ng∆∞·ªùi gi√∫p vi·ªác th∆∞·ªùng ph·∫£n h·ªìi trong v√≤ng 5-15 ph√∫t'}</li>
              <li>{t.waitingTip2 || 'B·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c th√¥ng b√°o ngay khi c√≥ x√°c nh·∫≠n'}</li>
              <li>{t.waitingTip3 || 'C√≥ th·ªÉ h·ªßy ƒë·∫∑t l·ªãch n·∫øu c·∫ßn thi·∫øt'}</li>
            </ul>
          </div>
        </div>

        <div className="pending-actions">
          <button 
            className="cancel-btn"
            onClick={handleCancel}
          >
            {t.cancelBooking || 'H·ªßy ƒë·∫∑t l·ªãch'}
          </button>
          <button 
            className="home-btn"
            onClick={() => navigate('/')}
          >
            {t.backToHome || 'V·ªÅ trang ch·ªß'}
          </button>

        </div>
      </div>
    </div>
  );
}

